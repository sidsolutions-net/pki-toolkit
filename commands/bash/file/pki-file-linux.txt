#################################################################
#  Author     : Sid McLaurin
#  Copyright  : Copyright (c) SID Solutions
#  Date       : 05/26/2019
#  Version    : 1.3
#  License    : GNU General Public License
#  GitHub     : https://github.com/sidsolutions-net/pki-toolkit
#################################################################
#  Description:
# - *nix PKI file commands
#################################################################
# Purpose:
# - provide file commands for certificate troubleshooting
#   and pre & post validation of certificate deployment
#
# Requirements:
# - CSR generation & validation
# - dates
# - subject / CN
# - CA chain
# - CA chain PEM creation
# - DNS SANs entries
# - issuer
# - subject public key info
# - signature algorithm
# - key pair match
# - serial number
# - Key & Extended Key Usage
# - CRL
# - thumbprint / fingerprint
# - public key
# - HTTP Pins
#
# Method:
# - openssl with standard shell commands
#
# Usage:
# - Set test subject in an environment variable
# - Set your values like subject
#   accordingly. Find & replace the file extensions
#   (.csr, .jks, .pem, etc) if necessary
#
# Notes:
# - Works! Great for both employee & client education.
#
#   $Id: pki-file-linux.txt, v 1.3
#################################################################

# Initialize with test subject
## Replace with correct value for your test case
testSubject="example.com"

# Generate a CSR
openssl req -nodes -sha256 -newkey rsa:2048 -keyout $testSubject.key -out $testSubject.csr -subj "/CN=example.com/O=SID Solutions/OU=Resume Department/L=Fort Walton Beach/ST=Florida/C=US/"

# Validate your CSR
## Verify
openssl req -in $testSubject.csr -noout -verify

## Subject
openssl req -in $testSubject.csr -noout -subject

## Public Key Info
openssl req -in $testSubject.csr -noout -text | awk '/Subject Public Key Info:/,/X509/{print $0}' | grep -v "Subject Public Key Info:" | grep Public.*Key | tr '\n' ',' | xargs | sed 's/,$//'

## Public Key
openssl req -in $testSubject.csr -noout -pubkey

## Signature algorithm
openssl req -in $testSubject.csr -noout -text | grep "Signature Algorithm"

## Modulus to MD5 hash
openssl req -in $testSubject.csr -noout -modulus | openssl md5

# Get the server certificate's begin and end dates:
openssl x509 -in $testSubject.pem -noout -dates

# Get the server certificate's expiration date:
openssl x509 -in $testSubject.pem -noout -enddate

# Get the server certificate's subject:
openssl x509 -in $testSubject.pem -noout -subject

# Same as above but showing Common Name:
openssl x509 -in $testSubject.pem -noout -subject | sed 's/^.*CN *= *\(.*\)$/\1/'

# Get all the cerificate and the CA chain that is being sent, split into separate files and renamed to their subject
# replacing spaces & commans with underscores:
# Note: Broke it down to 2 commands for better readability
echo -e "Q\n" | openssl s_client -showcerts -servername $testSubject -connect $testSubject:443 < /dev/null 2>&1 | awk '/BEGIN /,/END /{ if(/BEGIN/){a++}; out="cert"a".pem"; print >out}'
for cert in *.pem; do newname=$(openssl x509 -noout -subject -in $cert | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1 | sed -n 's/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem; mv $cert $newname; done

# Get all the cerificate and the CA chain that is being sent, split into separate files and append
# just the CAs to ca_certs.pem file:
# Note: Broke it down to 2 commands for better readability
echo -e "Q\n" | openssl s_client -showcerts -servername $testSubject -connect $testSubject:443 < /dev/null 2>&1 | awk '/BEGIN /,/END /{ if(/BEGIN/){a++}; out="cert"a".pem"; print >out}'
for cert in *.pem; do if [ $cert != cert1.pem ]; then newname=$(openssl x509 -noout -subject -in $cert | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1 | sed -n 's/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem; cat $cert >> ca_certs.pem; fi; done

# Get the subjects of the CA in a chain file:
cat ca_certs.pem |awk 'BEGIN { x509 = "openssl x509 -noout -subject" }
    /-----BEGIN CERTIFICATE-----/ { a = "" }
    { a = a $0 RS }
    /-----END CERTIFICATE-----/ { print a | x509; close(x509) }' | sed 's/^.*CN *= *\(.*\)$/\1/'

Get the DNS SAN(s) from the server certificate:
openssl x509 -in $testSubject.pem -noout -text | grep -i DNS | sed "s/^[ \t]*//"

# Get the issuer of the server certificate:
openssl x509 -in $testSubject.pem -noout -issuer

# Same as above just show just the Common Name of the issuer:
openssl x509 -in $testSubject.pem -noout -issuer | sed 's/^.*CN *= *\(.*\)$/\1/'

# Get subject public key info:
openssl x509 -in $testSubject.pem -noout -text | awk '/Subject Public Key Info:/,/X509/{print $0}' | grep -v "Subject Public Key Info:" | grep Key | tr '\n' ',' | xargs | sed 's/,$//'

# Get the signature algorithm of the server certificate:
# Question: Why is the signature algorithm repeated in a certificate?
# Answer:   https://tools.ietf.org/html/rfc6211
openssl x509 -in $testSubject.pem -noout -text | grep 'Signature Algorithm'

# Same but a single response:
openssl x509 -in $testSubject.pem -noout -text | grep 'Signature Algorithm' | uniq

# Get the certificate's serial number:
openssl x509 -in $testSubject.pem -noout -serial

# Get the certificate's Key Usage:
openssl x509 -in $testSubject.pem -noout -text | grep -E -A1 "v3 Key Usage"

# Get the certificate's Extended Key Usage:
openssl x509 -in $testSubject.pem -noout -text | grep -E -A1 "Extended Key Usage"

# Get the certificate's CRL:
openssl x509 -in $testSubject.pem -noout -text | grep -A 4 'X509v3 CRL Distribution Points' | grep "URI:" | sed 's/^.*URI:\(.*\)$/\1/'

# Check the key pair for a match
openssl x509 -in $testSubject.pem -noout -modulus | openssl md5
openssl rsa -in $testSubject.key -noout -modulus | openssl md5

# Check the CSR and private key for a match
openssl req -in $testSubject.csr -noout -modulus | openssl md5
openssl rsa -in $testSubject.key -noout -modulus | openssl md5

# Get the server's certificate thumbprints / fingerprints:
## SHA1 - Microsoft's preference
openssl x509 -in $testSubject.pem -noout -fingerprint -sha1

## SHA256
openssl x509 -in $testSubject.pem -noout -fingerprint -sha256

## MD5
openssl x509 -in $testSubject.pem -noout -fingerprint -md5

# Get the server's certificate public key:
openssl x509 -in $testSubject.pem -noout -fingerprint -pubkey

# Create HTTP Pin:
openssl x509 -in $testSubject.pem -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64
