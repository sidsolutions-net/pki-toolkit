##############################################################
#  Author     : Sid McLaurin
#  Copyright  : Copyright (c) SID Solutions
#  Date       : 03/19/2019
#  Version    : 1.0
#  License    : GNU General Public License
# GitHub Repo : https://github.com/sidsolutions-net/pki-toolkit
##############################################################
#  Description:
# - *nix PKI network commands
##############################################################
# Purpose:
# - provide network commands for certificate troubleshooting
#   and pre & post validation of certificate deployment
#
# Requirements:
# - dates
# - subject / CN
# - CA chain
# - SANs entries
# - issuer
# - signature algorithm
# - serial number
# - thumbprint / fingerprint
# - public key
#
# Method:
# - openssl with standard shell commands
#
# Usage:
# - Set test subject in an environment variable
# - Set validation port in an environment variable
#
# Notes:
# - All commands send SNI (-servername)
# - Works! Great for both employee & client education.
# - Preferably ran on the server(s) that is experiencing
#   certificate issues due to the rise of "sanctioned" MITM
#   attacks and firewalls. See the certificate & CA chain they see!
##############################################################

# Initialize with test subject
## Replace with correct value for your test case
testSubject="example.com"

# Initialize with validation port
## Replace with correct value for your test case
testPort="443"

# Get the server certificate's begin and end dates:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -dates

# Get the server certificate's expiration date:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -enddate | cut -d '=' -f 2

# Get the server certificate's subject:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -subject

# Same as above but showing Common Name:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -subject | sed 's/^.*CN=\(.*\)$/\1/'

# Get all the cerificate and the CA chain that is being sent and output their subject:
## Note: Went with the full BEGIN & END certificate label regex match for increased understanding
echo -e "Q\n" | openssl s_client -showcerts -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 |\
awk 'BEGIN { x509 = "openssl x509 -noout -subject" }
    /-----BEGIN CERTIFICATE-----/ { a = "" }
    { a = a $0 RS }
    /-----END CERTIFICATE-----/ { print a | x509; close(x509) }'

# Same as above but showing Common Name:
echo -e "Q\n" | openssl s_client -showcerts -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 |\
awk 'BEGIN { x509 = "openssl x509 -noout -subject" }
    /-----BEGIN CERTIFICATE-----/ { a = "" }
    { a = a $0 RS }
    /-----END CERTIFICATE-----/ { print a | x509; close(x509) }' | sed 's/^.*CN=\(.*\)$/\1/'

# Get the SAN(s) from the server certificate:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -text | grep -i DNS | sed "s/^[ \t]*//"

# Get the issuer of the server certificate:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -issuer

# Same as above just show just the Common Name of the issuer:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -issuer | sed 's/^.*CN=\(.*\)$/\1/'

# Get the signature algorithm of the server certificate:
# Question: Why is the signature algorithm repeated in a certificate?
# Answer:   https://tools.ietf.org/html/rfc6211
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -text | grep 'Signature Algorithm'

# Same but a single response:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -text | grep 'Signature Algorithm' | uniq

# Get the server certificate's serial number:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -serial

# Get CRL
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -text | grep -A 4 'X509v3 CRL Distribution Points' | grep "URI:" | sed 's/^.*URI:\(.*\)$/\1/'

# Get the server's certificate thumbprints / fingerprints:
## SHA1 - Microsoft's preference
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -fingerprint -sha1

## SHA256
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -fingerprint -sha256

## MD5
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -fingerprint -md5

# Get the server's certificate public key:
echo -e "Q\n" | openssl s_client -servername $testSubject -connect $testSubject:$testPort < /dev/null 2>&1 | openssl x509 -noout -fingerprint -pubkey

## Miscellaneous Port connectivity test
# Requires the bash shell
(echo >/dev/tcp/$testSubject/$testPort) &>/dev/null && echo "Open $testPort" || echo "Close $testPort"

# Use curl because telnet is typically disabled on most systems
curl -v telnet://$testSubject:$testPort

# Send some layer 7 traffic to ensure the site is responding
curl -I https://$testSubject/index.html
