##############################################################
#  Author     : Sid McLaurin
#  Copyright  : Copyright (c) SID Solutions
#  Date       : 03/19/2019
#  Version    : 1.0
#  License    : GNU General Public License
# GitHub Repo : https://github.com/sidsolutions-net/pki-toolkit
##############################################################
#  Description:
# - Windows PKI file commands
##############################################################
# Purpose:
# - provide network commands for certificate troubleshooting
#   and pre & post validation of certificate deployment
#
# Requirements:
# - CSR generation
# - dates
# - subject / CN
# - CA chain
# - SANs entries
# - issuer
# - signature algorithm
# - key pair match
# - serial number
# - thumbprint / fingerprint
# - public key
# - HTTP Pins
#
# Method:
# - openssl with standard DOS commands
#
# Usage:
# - Set test subject in an environment variable
# - Set your values like subject
#   accordingly. Find & replace the file extensions
#   (.csr, .key, .pem, etc) if necessary
#
# Notes:
# - Requires an installation of OpenSSL x509, req & rsa
#   functionality. Commands are expecting to be ran in the
#   OpenSSL install \bin directory or it is in your PATH.
# - The "clean up" CN scripts expect the DN. If the cert
#   has DN reversed like LDAP you will need to add
#   the "-nameopt RFC2253" to openssl x509 command. The
#   current google.com certificate is a good example:
#   subject= /C=US/ST=California/L=Mountain View/O=Google LLC/CN=*.google.com
# - You might need to the tweak the for /f "tokens" like
#   I've done because AWS Certificate Manager just took used
#   the CN
##############################################################

# Initialize with test subject
## Replace with correct value for your test case
SET testSubject="portfolio.sidsolutions.org"

# Generate a CSR
openssl req -nodes -sha256 -newkey rsa:2048 -keyout %testSubject%.key -out %testSubject%.csr -subj "/CN=portfolio.sidsolutions.org/O=SID Solutions/OU=Resume Department/L=Fort Walton Beach/ST=Florida/C=US/"

# Validate your CSR
## Verify
openssl req -in %testSubject%.csr -noout -verify

## Subject
openssl req -in %testSubject%.csr -noout -subject

## Public Key
openssl req -in %testSubject%.csr -noout -pubkey

## Signature algorithm
openssl req -in %testSubject%.csr -noout -text | findstr /c:"Signature Algorithm"

## Modulus to MD5 hash
openssl req -in %testSubject%.csr -noout -modulus | openssl md5

# Get the server certificate's begin and end dates:
openssl x509 -in %testSubject%.pem -noout -dates

# Get the server certificate's expiration date:
openssl x509 -in %testSubject%.pem -noout -enddate

# Get the server certificate's subject:
openssl x509 -in %testSubject%.pem -noout -subject

# Same as above but showing Common Name:
for /f "tokens=3 delims==" %i in ('openssl x509 -in %testSubject%.pem -noout -subject') do @echo %i

# Get the SAN(s) from the server certificate:
openssl x509 -in %testSubject%.pem -noout -text | findstr DNS

# Get the issuer of the server certificate:
openssl x509 -in %testSubject%.pem -noout -issuer

# Get the signature algorithm of the server certificate:
# Question: Why is the signature algorithm repeated in a certificate?
# Answer:   https://tools.ietf.org/html/rfc6211
openssl x509 -in %testSubject%.pem -noout -text | findstr /c:'Signature Algorithm'

# Get the server certificate's serial number:
openssl x509 -in %testSubject%.pem -noout -serial

# Check the key pair for a match
openssl x509 -in %testSubject%.pem -noout -modulus | openssl md5
openssl rsa -in %testSubject%.key -noout -modulus | openssl md5

# Check the CSR and private key for a match
openssl req -in %testSubject%.csr -noout -modulus | openssl md5
openssl rsa -in %testSubject%.key -noout -modulus | openssl md5


# Get the server's certificate thumbprints / fingerprints:
## SHA1 - Microsoft's preference
openssl x509 -in %testSubject%.pem -noout -fingerprint -sha1

## SHA256
openssl x509 -in %testSubject%.pem -noout -fingerprint -sha256

## MD5
openssl x509 -in %testSubject%.pem -noout -fingerprint -md5

# Get the server's certificate public key:
openssl x509 -in %testSubject%.pem -noout -fingerprint -pubkey

# Create HTTP Pin:
openssl x509 -in %testSubject%.pem -pubkey -noout | openssl pkey -pubin -outform der | openssl dgst -sha256 -binary | openssl enc -base64
