#################################################################
#  Author     : Sid McLaurin
#  Copyright  : Copyright (c) SID Solutions
#  Date       : 05/27/2019
#  Version    : 1.3
#  License    : GNU General Public License
#  GitHub     : https://github.com/sidsolutions-net/pki-toolkit
#################################################################
#  Description:
# - Keytool Linux PKI file commands
#################################################################
# Purpose:
# - provide file commands for certificate troubleshooting
#   and pre & post validation of certificate deployment
#
# Requirements:
# - CSR generation & validation
# - dates
# - subject / CN
# - CA chain
# - DNS SANs entries
# - issuer
# - signature algorithm
# - serial number
# - Key & Extended Key Usage
# - thumbprint / fingerprint
# - Keystore
# - Trust store
# - Keystore & PFX / P12 conversion
#
# Method:
# - keytool with standard shell commands
#
# Usage:
# - Set test subject in an environment variable
# - Set your values like subject
#   accordingly. Find & replace the file extensions
#   (.csr, .jks, .pem, etc) if necessary
#
# Notes:
# - Works! Great for both employee & client education.
#
#   $Id: pki-file-keytool-linux.txt, v 1.3
#################################################################

## Linux Commands
# Set your keytool path. Allows for testing with multiple
# version of Java
myKeytool="/path/to/keytool"

# Initialize with test subject
## Replace with correct value for your test case
testSubject="example.com"

# Generate a new keystore which requires CSR and private key generation
$myKeytool -genkey -alias $testSubject -keyalg RSA -keysize 2048 -keystore keystore.jks -dname "CN=example.com, O=SID Solutions, OU=Resume Department, L=Fort Walton Beach, ST=Florida, C=US" -storepass password -keypass password

# Generate a CSR for existing keystore
$myKeytool -certreq -alias $testSubject -keystore keystore.jks -file $testSubject.csr

# Validate your CSR
## Subject
$myKeytool -printcertreq -file $testSubject.csr | grep "Subject:"

## Public Key Info
$myKeytool -printcertreq -file $testSubject.csr | grep "Public Key:"

## Signature algorithm
$myKeytool -printcertreq -file $testSubject.csr | grep "Signature algorithm:"

# Import signed certificate for your CSR:
# Note: The alias should be for the same CSR in order for the private key to match
$myKeytool -import -trustcacerts -alias $testSubject -file $testSubject.crt -keystore keystore.jks -storepass password

# Get the server certificate's begin and end dates:
$myKeytool -printcert -v -file $testSubject.pem | grep Valid

# Get the server certificate's expiration date:
$myKeytool -printcert -v -file $testSubject.pem | grep Valid | sed 's/^.*until: \(.*\)$/\1/'

# Get the server certificate's subject:
$myKeytool -printcert -v -file $testSubject.pem | grep Owner | sed 's/^.*Owner: \(.*\)$/\1/'

# Same as above but showing Common Name:
$myKeytool -printcert -v -file $testSubject.pem | grep Owner | sed 's/^.*Owner: \(.*\)$/\1/' | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1

# Get all the cerificate and the CA chain that is being sent, split into separate files and renamed to their subject
# replacing spaces & commans with underscores:
# Note: Broke it down to 2 commands for better readability
$myKeytool -printcert -sslserver $testSubject:443 -rfc | awk '/BEGIN /,/END /{ if(/BEGIN/){a++}; out="cert"a".pem"; print >out}'
for cert in cert*.pem; do newname=$($myKeytool -printcert -v -file $cert | grep Owner |  sed 's/^.*Owner: \(.*\)$/\1/' | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1 | sed -n 's/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem; mv $cert $newname; done

# Get the DNS SAN(s) from the server certificate:
$myKeytool -printcert -v -file $testSubject.pem | grep DNSName | sed 's/^[\t ]*//'

# Get the issuer of the server certificate:
$myKeytool -printcert -v -file $testSubject.pem | grep Issuer:

# Same as above just show just the Common Name of the issuer:
$myKeytool -printcert -v -file $testSubject.pem | grep Issuer: | sed 's/^.*CN *= *\(.*\)/\1/'| cut -d ',' -f 1

# Get subject public key info:
$myKeytool -printcert -v -file $testSubject.pem | grep "Subject Public Key Algorithm:"

# Get the signature algorithm of the server certificate:
# Question: Why is the signature algorithm repeated in a certificate?
# Answer:   https://tools.ietf.org/html/rfc6211
$myKeytool -printcert -v -file $testSubject.pem | grep "Signature algorithm name:"

# Get the certificate's serial number:
$myKeytool -printcert -v -file $testSubject.pem | grep "Serial number:"

# Get the certificate's Key Usage:
$myKeytool -printcert -v -file $testSubject.pem | awk '/KeyUsage /,/]/{print $0}'

# Get the certificate's Extended Key Usage:
$myKeytool -printcert -v -file $testSubject.pem | awk '/ExtendedKeyUsage/,/]/{print $0}'

# Get the certificate's CRL:
$myKeytool -printcert -v -file $testSubject.pem | grep "\[URIName:" | sed 's/^[\t ]*//'

# Get the server's certificate thumbprints / fingerprints:
## SHA1 - Microsoft's preference
$myKeytool -printcert -v -file $testSubject.pem | awk '/Certificate fingerprints/,/Signature/{print $0}' | grep "SHA1:" | xargs

## SHA256
$myKeytool -printcert -v -file $testSubject.pem | awk '/Certificate fingerprints/,/Signature/{print $0}' | grep "SHA256:" | xargs

# Keystore commands
## Generate new keystore and self signed certificate
$myKeytool -genkey -alias $testSubject -keyalg RSA -keysize 2048 -validity 360 -keystore selfsigned-keystore.jks -dname "CN=example.com, O=SID Solutions, OU=Resume Department, L=Fort Walton Beach, ST=Florida, C=US" -storepass password -keypass password

## Get certificate(s) subject:
$myKeytool -list -v -keystore keystore.jks -storepass password | grep Owner | sed 's/^.*Owner: \(.*\)$/\1/'

## Same as above but just Common Name:
$myKeytool -list -v -keystore keystore.jks -storepass password | grep Owner | sed 's/^.*Owner: \(.*\)$/\1/' | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1

## Get certificate(s) aliases:
$myKeytool -list -v -keystore keystore.jks -storepass password | grep "Alias name:" | sed 's/^.*Alias name: \(.*\)$/\1/'

## Delete a certificate from keystore
$myKeytool -delete -alias $testSubject -keystore keystore.jks -storepass password

## Export certificate from keystore
$myKeytool -export -alias $testSubject -keystore keystore.jks -storepass password

## Change keystore password
$myKeytool -storepasswd -new new_password -keystore keystore.jks -storepass password

# Trust store commands
## List the trusted certificate entries:
$myKeytool -list -v -keystore cacerts.jks -storepass password | awk '/Entry type: trustedCertEntry/, /Owner:/ {print $0}' | grep Owner | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1

## Get CA chain from remote server and import to trust store:
# Note: Broke it down to 2 commands for better readability
$myKeytool -printcert -sslserver $testSubject:443 -rfc | awk '/BEGIN /,/END /{ if(/BEGIN/){a++}; out="cert"a".pem"; print >out}'
for cert in cert*.pem; do if [ $cert != cert1.pem ]; then newname=$($myKeytool -printcert -v -file $cert | grep Owner | sed 's/^.*Owner: \(.*\)$/\1/' | sed 's/^.*CN *= *\(.*\)/\1/' | cut -d ',' -f 1 | sed -n 's/[ ,.*]/_/g; s/__/_/g; s/^_//g;p').pem; mv $cert $newname; caName=$(echo $newname | sed s/.pem//); $myKeytool -import -trustcacerts -file $newname -alias $caName -keystore cacerts.jks -storepass password; fi; done

## Export all trusted certificate entries to separate files:
for cert in `$myKeytool -list -v -keystore cacerts.jks -storepass password | awk '/Alias name:/, /Entry type: trustedCertEntry/ {print $0}' | grep Alias | sed 's/^.*Alias name: \(.*\)$/\1/'`; do `$myKeytool -exportcert -keystore cacerts.jks -storepass password -alias $cert -rfc -file ${cert}.crt`; done

## Export all trusted certificate entries to a single CA chain file:
for cert in `$myKeytool -list -v -keystore cacerts.jks -storepass password | awk '/Alias name:/, /Entry type: trustedCertEntry/ {print $0}' | grep Alias | sed 's/^.*Alias name: \(.*\)$/\1/'`; do `$myKeytool -exportcert -keystore cacerts.jks -storepass password -alias $cert -rfc >> cacerts.pem`; done

# Conversion commands
## Keystore to PFX / P12:
$myKeytool -importkeystore -srckeystore keystore.jks -srcstorepass password -srcstoretype JKS -destkeystore $testSubject.pfx -deststorepass password -deststoretype PKCS12

## PFX / P12 to Keystore:
$myKeytool -importkeystore -srckeystore $testSubject.pfx -srcstorepass password -srcstoretype pkcs12 -destkeystore new_keystore.jks -deststorepass password -deststoretype JKS
